namespace Kanawanagasaki.Yamabiko.Test.Dtls;

using Kanawanagasaki.Yamabiko.Dtls;
using Kanawanagasaki.Yamabiko.Dtls.Enums;
using System.Security.Cryptography;

public class CipherTextRecord_Tests
{
    [Fact]
    public void ParseAndWrite_ServerEncryptedExtensions()
    {
        var data = new byte[] { 0x2e, 0x79, 0xfa, 0x00, 0x2f, 0xee, 0x9d, 0xcf, 0xf3, 0xf8, 0x67, 0x9a, 0x48, 0x59, 0xfe, 0x68, 0x37, 0x7f, 0xb3, 0x4a, 0xda, 0x85, 0xdf, 0x87, 0x9c, 0x67, 0x3e, 0x50, 0x1d, 0x7a, 0x4e, 0x8f, 0x19, 0x50, 0xe0, 0xfc, 0xf6, 0x7f, 0xe4, 0x42, 0xe7, 0xd7, 0xd2, 0xb8, 0xa3, 0xd5, 0xfa, 0x59, 0x57, 0x4f, 0xfd, 0x00, };
        var key = new byte[] { 0x00, 0x4e, 0x03, 0xe6, 0x4a, 0xb6, 0xcb, 0xa6, 0xb5, 0x42, 0x77, 0x5e, 0xc2, 0x30, 0xe2, 0x0a };
        var iv = new byte[] { 0x6d, 0x99, 0x24, 0xbe, 0x04, 0x4e, 0xe9, 0x7c, 0x62, 0x49, 0x13, 0xf2 };
        var headerKey = new byte[] { 0x71, 0x73, 0xfa, 0xc5, 0x11, 0x94, 0xe7, 0x75, 0x00, 0x1d, 0x62, 0x5e, 0xf6, 0x9d, 0x7c, 0x9f };
        var decrypted = new byte[] { 0x08, 0x00, 0x00, 0x12, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x10, 0x00, 0x0a, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x17, 0x00, 0x1d, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00 };

        using var aes = new AesGcm(key, AesGcm.TagByteSizes.MaxSize);
        using var headerAes = Aes.Create();
        headerAes.KeySize = 128;
        headerAes.Key = headerKey;
        headerAes.Mode = CipherMode.ECB;
        headerAes.Padding = PaddingMode.None;

        int offset = 0;
        var record = CipherTextRecord.DecryptAndParse(data, aes, iv, headerAes, ref offset);

        Assert.Null(record.ConnectionId);
        Assert.Equal(0x0000, record.RecordNumber);
        Assert.Equal(0x02, record.EpochLowBits);
        Assert.Equal(decrypted, record.Buffer);
        Assert.Equal(ERecordType.HANDSHAKE, record.Type);

        var length = record.Length();

        Assert.Equal(data.Length, length);

        var buffer = new byte[length];

        record.EncryptAndWrite(buffer, aes, iv, headerAes);

        Assert.Equal(data, buffer);
    }

    [Fact]
    public void ParseAndWrite_ServerCertificate()
    {
        var data = new byte[] { 0x2e, 0xed, 0x2b, 0x03, 0x4b, 0xd3, 0x77, 0x7e, 0x1a, 0xdf, 0x9e, 0x98, 0xc8, 0xc4, 0xff, 0xa0, 0x72, 0xc2, 0xc3, 0xb6, 0xbb, 0xcd, 0x9f, 0xbd, 0x2d, 0x1f, 0x34, 0x3c, 0x5d, 0xf9, 0x54, 0xd9, 0x97, 0xa2, 0xcd, 0x1d, 0x33, 0x42, 0xa3, 0x3d, 0x3f, 0x6a, 0x85, 0xe1, 0x21, 0x42, 0x3c, 0xe0, 0x02, 0xea, 0x33, 0x5e, 0x37, 0x7e, 0x7a, 0x21, 0x5b, 0x8a, 0x9e, 0xcc, 0x5e, 0x26, 0x7c, 0x60, 0xa2, 0xbc, 0x79, 0x4e, 0xd1, 0xd8, 0x1f, 0x39, 0x8b, 0xce, 0xdf, 0xa3, 0x68, 0xfb, 0xdb, 0x7c, 0xa3, 0x67, 0xa0, 0x46, 0x65, 0x5d, 0x61, 0xe4, 0x86, 0x67, 0x62, 0xfa, 0xac, 0xfd, 0xa4, 0x9d, 0x0f, 0x3a, 0x39, 0x71, 0x86, 0xd8, 0x32, 0xe4, 0x81, 0x87, 0xd0, 0x76, 0xea, 0x8d, 0xe5, 0x32, 0x12, 0x87, 0xbe, 0x9b, 0xfd, 0xa2, 0x15, 0x19, 0xda, 0x58, 0xe0, 0xc4, 0x80, 0x56, 0x99, 0x7e, 0x49, 0x2e, 0xdf, 0xe4, 0x76, 0x6b, 0x2c, 0xd5, 0x1e, 0xa1, 0x2b, 0xc2, 0xf6, 0xd5, 0x50, 0x5b, 0x80, 0xe5, 0x1a, 0x64, 0x5d, 0xa9, 0xb0, 0x7f, 0xbf, 0x7a, 0x01, 0xb8, 0x4d, 0x5b, 0xa7, 0x22, 0xb2, 0xe1, 0x7d, 0xd9, 0x52, 0x8c, 0x28, 0x63, 0xcd, 0x63, 0xa7, 0x35, 0xb5, 0x4c, 0xd8, 0x23, 0x95, 0x87, 0x84, 0x1a, 0x59, 0x2f, 0xbe, 0x57, 0x5b, 0x2d, 0xe1, 0x8a, 0x6c, 0x99, 0xf7, 0x82, 0xa9, 0x56, 0xe2, 0x8c, 0xe7, 0x69, 0x67, 0x42, 0x67, 0x3d, 0x7e, 0xe7, 0x37, 0xf4, 0x6e, 0x9c, 0xba, 0xa2, 0x89, 0x2d, 0x97, 0x21, 0xef, 0xcc, 0xc9, 0x1f, 0x16, 0x72, 0x26, 0xa5, 0xbe, 0x4c, 0x9c, 0xd8, 0x6b, 0x97, 0xfe, 0xf3, 0x32, 0x3f, 0xd1, 0x92, 0xf4, 0x60, 0xe8, 0xef, 0x8b, 0x91, 0x3b, 0xbf, 0x9f, 0x97, 0x05, 0x63, 0x85, 0xd4, 0xc3, 0xec, 0x2b, 0x2b, 0xdc, 0x2e, 0xc4, 0x8a, 0x66, 0x8c, 0xf6, 0xf1, 0x0d, 0xb3, 0xfe, 0x00, 0x91, 0x97, 0xfa, 0xb9, 0x8d, 0x7c, 0x2a, 0x88, 0x15, 0xac, 0x5a, 0x4e, 0xd3, 0xaa, 0x08, 0x94, 0xb9, 0xf9, 0xf9, 0x95, 0x12, 0x43, 0x0d, 0xf2, 0x1f, 0x13, 0x4c, 0x49, 0x34, 0x40, 0x73, 0xf9, 0xaf, 0x32, 0x8e, 0x35, 0xc2, 0xe1, 0x6b, 0x91, 0x3f, 0x4e, 0x61, 0x33, 0x21, 0xe4, 0xa7, 0x9b, 0xd2, 0xd3, 0x38, 0x47, 0x32, 0x1e, 0x61, 0x5d, 0x58, 0x94, 0x09, 0xb1, 0x65, 0xf9, 0xc2, 0xb0, 0x18, 0x80, 0x4f, 0x3c, 0x33, 0x40, 0xe4, 0x0a, 0xd5, 0xf5, 0x9a, 0x26, 0x46, 0x0a, 0x12, 0x0f, 0x2d, 0x55, 0xfc, 0x8b, 0xca, 0x47, 0x22, 0x74, 0xfd, 0xb9, 0x06, 0x09, 0xa2, 0x18, 0x70, 0xe1, 0xcc, 0x41, 0xaa, 0xd0, 0x24, 0xfa, 0x48, 0xa8, 0x6f, 0x07, 0x8f, 0x90, 0x8b, 0xc6, 0x26, 0x18, 0xc4, 0xc3, 0x2f, 0x0c, 0xfc, 0xfb, 0xb5, 0x95, 0xa7, 0xd2, 0x93, 0xf4, 0xba, 0xab, 0x93, 0xff, 0x35, 0xf0, 0xde, 0x10, 0x71, 0x17, 0x1e, 0x4c, 0x51, 0x0d, 0x75, 0xdd, 0x29, 0xf5, 0x0d, 0x3d, 0xe8, 0x1c, 0xae, 0x9e, 0x1c, 0x56, 0xed, 0x60, 0x9c, 0x1b, 0xc7, 0x27, 0x5e, 0xac, 0x1d, 0x69, 0x33, 0xdf, 0x08, 0x93, 0xdd, 0x0e, 0x3c, 0x5c, 0x7f, 0xd3, 0x65, 0x14, 0x26, 0xb3, 0xe4, 0xc3, 0xca, 0x6d, 0x46, 0x1d, 0x82, 0x0a, 0xdf, 0xff, 0x75, 0xfb, 0x7b, 0x15, 0x8b, 0xe9, 0x89, 0x30, 0x89, 0xda, 0xc9, 0x30, 0xa0, 0x15, 0xf8, 0x9c, 0xb4, 0xef, 0x22, 0x7a, 0xb9, 0xe4, 0x3d, 0xf0, 0x14, 0x7a, 0x25, 0x07, 0x59, 0xe3, 0xe0, 0x1b, 0x5d, 0xb7, 0x48, 0x0c, 0x52, 0x7a, 0x1d, 0x4b, 0x8a, 0x09, 0xc4, 0xac, 0x05, 0xfc, 0xc6, 0xd6, 0x40, 0x15, 0xd6, 0xaf, 0x2c, 0x3e, 0x52, 0x15, 0x03, 0xa8, 0x2f, 0xb9, 0x02, 0x5c, 0x61, 0x98, 0x18, 0xca, 0x31, 0xfb, 0x24, 0x03, 0x63, 0x0a, 0xc0, 0x6a, 0xb7, 0x11, 0x90, 0x53, 0xa7, 0x02, 0x86, 0x24, 0x0b, 0x3f, 0x8e, 0x43, 0x96, 0x61, 0xad, 0x95, 0x48, 0x7a, 0xa5, 0x72, 0xd7, 0x08, 0x60, 0x8d, 0xd0, 0xd4, 0xfe, 0x27, 0xbb, 0xcf, 0x1e, 0xdf, 0x50, 0x3a, 0x54, 0x05, 0x46, 0x0b, 0x9e, 0x10, 0xf6, 0x93, 0x4a, 0x41, 0xa8, 0xcf, 0xb7, 0x0b, 0x60, 0x90, 0x6f, 0x7e, 0x66, 0xd6, 0x53, 0x15, 0x61, 0xef, 0x08, 0xad, 0xe3, 0xde, 0x45, 0x77, 0xa7, 0x77, 0x6b, 0xf6, 0x56, 0xbb, 0x48, 0x5c, 0xee, 0x28, 0x2c, 0x83, 0x7a, 0xa8, 0xbc, 0xe0, 0x6a, 0xe6, 0x06, 0xa1, 0x71, 0xd7, 0x54, 0x96, 0x36, 0xfe, 0xd8, 0x3e, 0x24, 0xbf, 0x9f, 0x10, 0x5b, 0x7d, 0x1d, 0x02, 0xda, 0x30, 0x86, 0xce, 0x24, 0x49, 0xaf, 0xa2, 0xd0, 0xec, 0x26, 0x18, 0x5d, 0x0c, 0x1f, 0x05, 0x2f, 0x88, 0xcd, 0x9d, 0x55, 0xeb, 0x12, 0x4b, 0xda, 0xe3, 0x66, 0x7f, 0x59, 0x79, 0x97, 0x95, 0xf9, 0x27, 0x50, 0xb9, 0xca, 0x70, 0x55, 0x66, 0x86, 0x6a, 0x99, 0x24, 0xa2, 0x46, 0xa4, 0x71, 0x90, 0x4b, 0x2d, 0x69, 0xdc, 0x17, 0xcb, 0xfe, 0x50, 0xa5, 0x62, 0xff, 0x26, 0xff, 0x9e, 0x40, 0x4d, 0x7b, 0x2a, 0x11, 0x67, 0x0c, 0x27, 0x56, 0x3f, 0x3e, 0x37, 0x99, 0x3c, 0xc6, 0xe6, 0x73, 0x43, 0x6d, 0xc3, 0xa8, 0x51, 0x21, 0x4d, 0x6d, 0x27, 0x86, 0x2b, 0x64, 0x5d, 0xcb, 0x0b, 0xf4, 0xd4, 0xc7, 0x44, 0x0f, 0x6a, 0xd4, 0x83, 0xef, 0x9d, 0x58, 0xfa, 0xb4, 0x7d, 0x24, 0x4b, 0xd6, 0xcf, 0xa6, 0x8f, 0x12, 0xe9, 0xaa, 0xae, 0xcd, 0x2d, 0x52, 0x8e, 0x85, 0x66, 0xf9, 0x7f, 0x50, 0x56, 0xcf, 0x8e, 0xfc, 0x7d, 0x1e, 0x55, 0xfb, 0xee, 0x1b, 0xe8, 0x7f, 0x7f, 0x89, 0x73, 0x7c, 0x8a, 0xfa, 0x20, 0xe4, 0x96, 0x37, 0x0d, 0x25, 0xf7, 0x52, 0x99, 0xe5, 0x91, 0x8c, 0xb9, 0x4b, 0xa5, 0xb5, 0xef, 0xdb, 0x84, 0x7d, 0x9c, 0xa5, 0x44, 0xa5, 0x38, 0x65, 0xa3, 0x6d, 0x69, 0x1e, 0xbe, 0x8b, 0xe8, 0xe2, 0xda, 0x08, 0xc1, 0x7b, 0xe9, 0x02, 0x38, 0x0d, 0xb9, 0xa3, 0xd7, 0x04, 0x91, 0xb8, 0x98, 0xf8, 0xc5, 0x88, 0xe7, 0x44, 0x64, 0x8e, 0xb9, 0x37, 0x70, 0x53, 0x0c, 0x83, 0xce, 0xcf, 0xa4, 0x30, 0x70, 0x21, 0x45, 0x22, 0x93, 0x8c, 0x0e, 0x66, 0x82, 0x9e, 0xf1, 0x33, 0x34, 0x9b };
        var key = new byte[] { 0x00, 0x4e, 0x03, 0xe6, 0x4a, 0xb6, 0xcb, 0xa6, 0xb5, 0x42, 0x77, 0x5e, 0xc2, 0x30, 0xe2, 0x0a };
        var iv = new byte[] { 0x6d, 0x99, 0x24, 0xbe, 0x04, 0x4e, 0xe9, 0x7c, 0x62, 0x49, 0x13, 0xf2 };
        var headerKey = new byte[] { 0x71, 0x73, 0xfa, 0xc5, 0x11, 0x94, 0xe7, 0x75, 0x00, 0x1d, 0x62, 0x5e, 0xf6, 0x9d, 0x7c, 0x9f };
        var decrypted = new byte[] { 0x0b, 0x00, 0x03, 0x2e, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x2e, 0x00, 0x00, 0x03, 0x2a, 0x00, 0x03, 0x25, 0x30, 0x82, 0x03, 0x21, 0x30, 0x82, 0x02, 0x09, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x15, 0x5a, 0x92, 0xad, 0xc2, 0x04, 0x8f, 0x90, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x22, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0a, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x43, 0x41, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x30, 0x30, 0x35, 0x30, 0x31, 0x33, 0x38, 0x31, 0x37, 0x5a, 0x17, 0x0d, 0x31, 0x39, 0x31, 0x30, 0x30, 0x35, 0x30, 0x31, 0x33, 0x38, 0x31, 0x37, 0x5a, 0x30, 0x2b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x1c, 0x30, 0x1a, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x13, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x75, 0x6c, 0x66, 0x68, 0x65, 0x69, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc4, 0x80, 0x36, 0x06, 0xba, 0xe7, 0x47, 0x6b, 0x08, 0x94, 0x04, 0xec, 0xa7, 0xb6, 0x91, 0x04, 0x3f, 0xf7, 0x92, 0xbc, 0x19, 0xee, 0xfb, 0x7d, 0x74, 0xd7, 0xa8, 0x0d, 0x00, 0x1e, 0x7b, 0x4b, 0x3a, 0x4a, 0xe6, 0x0f, 0xe8, 0xc0, 0x71, 0xfc, 0x73, 0xe7, 0x02, 0x4c, 0x0d, 0xbc, 0xf4, 0xbd, 0xd1, 0x1d, 0x39, 0x6b, 0xba, 0x70, 0x46, 0x4a, 0x13, 0xe9, 0x4a, 0xf8, 0x3d, 0xf3, 0xe1, 0x09, 0x59, 0x54, 0x7b, 0xc9, 0x55, 0xfb, 0x41, 0x2d, 0xa3, 0x76, 0x52, 0x11, 0xe1, 0xf3, 0xdc, 0x77, 0x6c, 0xaa, 0x53, 0x37, 0x6e, 0xca, 0x3a, 0xec, 0xbe, 0xc3, 0xaa, 0xb7, 0x3b, 0x31, 0xd5, 0x6c, 0xb6, 0x52, 0x9c, 0x80, 0x98, 0xbc, 0xc9, 0xe0, 0x28, 0x18, 0xe2, 0x0b, 0xf7, 0xf8, 0xa0, 0x3a, 0xfd, 0x17, 0x04, 0x50, 0x9e, 0xce, 0x79, 0xbd, 0x9f, 0x39, 0xf1, 0xea, 0x69, 0xec, 0x47, 0x97, 0x2e, 0x83, 0x0f, 0xb5, 0xca, 0x95, 0xde, 0x95, 0xa1, 0xe6, 0x04, 0x22, 0xd5, 0xee, 0xbe, 0x52, 0x79, 0x54, 0xa1, 0xe7, 0xbf, 0x8a, 0x86, 0xf6, 0x46, 0x6d, 0x0d, 0x9f, 0x16, 0x95, 0x1a, 0x4c, 0xf7, 0xa0, 0x46, 0x92, 0x59, 0x5c, 0x13, 0x52, 0xf2, 0x54, 0x9e, 0x5a, 0xfb, 0x4e, 0xbf, 0xd7, 0x7a, 0x37, 0x95, 0x01, 0x44, 0xe4, 0xc0, 0x26, 0x87, 0x4c, 0x65, 0x3e, 0x40, 0x7d, 0x7d, 0x23, 0x07, 0x44, 0x01, 0xf4, 0x84, 0xff, 0xd0, 0x8f, 0x7a, 0x1f, 0xa0, 0x52, 0x10, 0xd1, 0xf4, 0xf0, 0xd5, 0xce, 0x79, 0x70, 0x29, 0x32, 0xe2, 0xca, 0xbe, 0x70, 0x1f, 0xdf, 0xad, 0x6b, 0x4b, 0xb7, 0x11, 0x01, 0xf4, 0x4b, 0xad, 0x66, 0x6a, 0x11, 0x13, 0x0f, 0xe2, 0xee, 0x82, 0x9e, 0x4d, 0x02, 0x9d, 0xc9, 0x1c, 0xdd, 0x67, 0x16, 0xdb, 0xb9, 0x06, 0x18, 0x86, 0xed, 0xc1, 0xba, 0x94, 0x21, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x52, 0x30, 0x50, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x89, 0x4f, 0xde, 0x5b, 0xcc, 0x69, 0xe2, 0x52, 0xcf, 0x3e, 0xa3, 0x00, 0xdf, 0xb1, 0x97, 0xb8, 0x1d, 0xe1, 0xc1, 0x46, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x59, 0x16, 0x45, 0xa6, 0x9a, 0x2e, 0x37, 0x79, 0xe4, 0xf6, 0xdd, 0x27, 0x1a, 0xba, 0x1c, 0x0b, 0xfd, 0x6c, 0xd7, 0x55, 0x99, 0xb5, 0xe7, 0xc3, 0x6e, 0x53, 0x3e, 0xff, 0x36, 0x59, 0x08, 0x43, 0x24, 0xc9, 0xe7, 0xa5, 0x04, 0x07, 0x9d, 0x39, 0xe0, 0xd4, 0x29, 0x87, 0xff, 0xe3, 0xeb, 0xdd, 0x09, 0xc1, 0xcf, 0x1d, 0x91, 0x44, 0x55, 0x87, 0x0b, 0x57, 0x1d, 0xd1, 0x9b, 0xdf, 0x1d, 0x24, 0xf8, 0xbb, 0x9a, 0x11, 0xfe, 0x80, 0xfd, 0x59, 0x2b, 0xa0, 0x39, 0x8c, 0xde, 0x11, 0xe2, 0x65, 0x1e, 0x61, 0x8c, 0xe5, 0x98, 0xfa, 0x96, 0xe5, 0x37, 0x2e, 0xef, 0x3d, 0x24, 0x8a, 0xfd, 0xe1, 0x74, 0x63, 0xeb, 0xbf, 0xab, 0xb8, 0xe4, 0xd1, 0xab, 0x50, 0x2a, 0x54, 0xec, 0x00, 0x64, 0xe9, 0x2f, 0x78, 0x19, 0x66, 0x0d, 0x3f, 0x27, 0xcf, 0x20, 0x9e, 0x66, 0x7f, 0xce, 0x5a, 0xe2, 0xe4, 0xac, 0x99, 0xc7, 0xc9, 0x38, 0x18, 0xf8, 0xb2, 0x51, 0x07, 0x22, 0xdf, 0xed, 0x97, 0xf3, 0x2e, 0x3e, 0x93, 0x49, 0xd4, 0xc6, 0x6c, 0x9e, 0xa6, 0x39, 0x6d, 0x74, 0x44, 0x62, 0xa0, 0x6b, 0x42, 0xc6, 0xd5, 0xba, 0x68, 0x8e, 0xac, 0x3a, 0x01, 0x7b, 0xdd, 0xfc, 0x8e, 0x2c, 0xfc, 0xad, 0x27, 0xcb, 0x69, 0xd3, 0xcc, 0xdc, 0xa2, 0x80, 0x41, 0x44, 0x65, 0xd3, 0xae, 0x34, 0x8c, 0xe0, 0xf3, 0x4a, 0xb2, 0xfb, 0x9c, 0x61, 0x83, 0x71, 0x31, 0x2b, 0x19, 0x10, 0x41, 0x64, 0x1c, 0x23, 0x7f, 0x11, 0xa5, 0xd6, 0x5c, 0x84, 0x4f, 0x04, 0x04, 0x84, 0x99, 0x38, 0x71, 0x2b, 0x95, 0x9e, 0xd6, 0x85, 0xbc, 0x5c, 0x5d, 0xd6, 0x45, 0xed, 0x19, 0x90, 0x94, 0x73, 0x40, 0x29, 0x26, 0xdc, 0xb4, 0x0e, 0x34, 0x69, 0xa1, 0x59, 0x41, 0xe8, 0xe2, 0xcc, 0xa8, 0x4b, 0xb6, 0x08, 0x46, 0x36, 0xa0, 0x00, 0x00 };

        using var aes = new AesGcm(key, AesGcm.TagByteSizes.MaxSize);
        using var headerAes = Aes.Create();
        headerAes.KeySize = 128;
        headerAes.Key = headerKey;
        headerAes.Mode = CipherMode.ECB;
        headerAes.Padding = PaddingMode.None;

        int offset = 0;
        var record = CipherTextRecord.DecryptAndParse(data, aes, iv, headerAes, ref offset);

        Assert.Null(record.ConnectionId);
        Assert.Equal(0x0001, record.RecordNumber);
        Assert.Equal(0x02, record.EpochLowBits);
        Assert.Equal(decrypted, record.Buffer);
        Assert.Equal(ERecordType.HANDSHAKE, record.Type);

        var length = record.Length();

        Assert.Equal(data.Length, length);

        var buffer = new byte[length];

        record.EncryptAndWrite(buffer, aes, iv, headerAes);

        Assert.Equal(data, buffer);
    }

    [Fact]
    public void WriteAndParse_RandomData()
    {
        var data = RandomNumberGenerator.GetBytes(32);

        var key = new byte[] { 0x00, 0x4e, 0x03, 0xe6, 0x4a, 0xb6, 0xcb, 0xa6, 0xb5, 0x42, 0x77, 0x5e, 0xc2, 0x30, 0xe2, 0x0a };
        var iv = new byte[] { 0x6d, 0x99, 0x24, 0xbe, 0x04, 0x4e, 0xe9, 0x7c, 0x62, 0x49, 0x13, 0xf2 };
        var headerKey = new byte[] { 0x71, 0x73, 0xfa, 0xc5, 0x11, 0x94, 0xe7, 0x75, 0x00, 0x1d, 0x62, 0x5e, 0xf6, 0x9d, 0x7c, 0x9f };

        using var aes = new AesGcm(key, AesGcm.TagByteSizes.MaxSize);
        using var headerAes = Aes.Create();
        headerAes.KeySize = 128;
        headerAes.Key = headerKey;
        headerAes.Mode = CipherMode.ECB;
        headerAes.Padding = PaddingMode.None;

        var record = new CipherTextRecord(data)
        {
            Type = ERecordType.APPLICATION_DATA,
            EpochLowBits = 3,
            RecordNumber = 123
        };

        var length = record.Length();
        var buffer = new byte[length];

        record.EncryptAndWrite(buffer, aes, iv, headerAes);

        int offset = 0;
        var parsedRecord = CipherTextRecord.DecryptAndParse(buffer, aes, iv, headerAes, ref offset);

        Assert.Equal(data, parsedRecord.Buffer);
        Assert.Equal(ERecordType.APPLICATION_DATA, parsedRecord.Type);
        Assert.Equal(123, parsedRecord.RecordNumber);
        Assert.Equal(3, parsedRecord.EpochLowBits);
    }
}
