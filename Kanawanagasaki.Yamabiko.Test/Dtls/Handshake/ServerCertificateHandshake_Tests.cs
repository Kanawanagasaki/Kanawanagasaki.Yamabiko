namespace Kanawanagasaki.Yamabiko.Test.Dtls.Handshake;

using Kanawanagasaki.Yamabiko.Dtls;
using Kanawanagasaki.Yamabiko.Dtls.Handshake;

public class ServerCertificateHandshake_Tests
{
    [Fact]
    public void ParseAndWrite()
    {
        var data = new byte[] { 0x00, 0x00, 0x03, 0x2a, 0x00, 0x03, 0x25, 0x30, 0x82, 0x03, 0x21, 0x30, 0x82, 0x02, 0x09, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x15, 0x5a, 0x92, 0xad, 0xc2, 0x04, 0x8f, 0x90, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x22, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0a, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x43, 0x41, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x30, 0x30, 0x35, 0x30, 0x31, 0x33, 0x38, 0x31, 0x37, 0x5a, 0x17, 0x0d, 0x31, 0x39, 0x31, 0x30, 0x30, 0x35, 0x30, 0x31, 0x33, 0x38, 0x31, 0x37, 0x5a, 0x30, 0x2b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x1c, 0x30, 0x1a, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x13, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x75, 0x6c, 0x66, 0x68, 0x65, 0x69, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc4, 0x80, 0x36, 0x06, 0xba, 0xe7, 0x47, 0x6b, 0x08, 0x94, 0x04, 0xec, 0xa7, 0xb6, 0x91, 0x04, 0x3f, 0xf7, 0x92, 0xbc, 0x19, 0xee, 0xfb, 0x7d, 0x74, 0xd7, 0xa8, 0x0d, 0x00, 0x1e, 0x7b, 0x4b, 0x3a, 0x4a, 0xe6, 0x0f, 0xe8, 0xc0, 0x71, 0xfc, 0x73, 0xe7, 0x02, 0x4c, 0x0d, 0xbc, 0xf4, 0xbd, 0xd1, 0x1d, 0x39, 0x6b, 0xba, 0x70, 0x46, 0x4a, 0x13, 0xe9, 0x4a, 0xf8, 0x3d, 0xf3, 0xe1, 0x09, 0x59, 0x54, 0x7b, 0xc9, 0x55, 0xfb, 0x41, 0x2d, 0xa3, 0x76, 0x52, 0x11, 0xe1, 0xf3, 0xdc, 0x77, 0x6c, 0xaa, 0x53, 0x37, 0x6e, 0xca, 0x3a, 0xec, 0xbe, 0xc3, 0xaa, 0xb7, 0x3b, 0x31, 0xd5, 0x6c, 0xb6, 0x52, 0x9c, 0x80, 0x98, 0xbc, 0xc9, 0xe0, 0x28, 0x18, 0xe2, 0x0b, 0xf7, 0xf8, 0xa0, 0x3a, 0xfd, 0x17, 0x04, 0x50, 0x9e, 0xce, 0x79, 0xbd, 0x9f, 0x39, 0xf1, 0xea, 0x69, 0xec, 0x47, 0x97, 0x2e, 0x83, 0x0f, 0xb5, 0xca, 0x95, 0xde, 0x95, 0xa1, 0xe6, 0x04, 0x22, 0xd5, 0xee, 0xbe, 0x52, 0x79, 0x54, 0xa1, 0xe7, 0xbf, 0x8a, 0x86, 0xf6, 0x46, 0x6d, 0x0d, 0x9f, 0x16, 0x95, 0x1a, 0x4c, 0xf7, 0xa0, 0x46, 0x92, 0x59, 0x5c, 0x13, 0x52, 0xf2, 0x54, 0x9e, 0x5a, 0xfb, 0x4e, 0xbf, 0xd7, 0x7a, 0x37, 0x95, 0x01, 0x44, 0xe4, 0xc0, 0x26, 0x87, 0x4c, 0x65, 0x3e, 0x40, 0x7d, 0x7d, 0x23, 0x07, 0x44, 0x01, 0xf4, 0x84, 0xff, 0xd0, 0x8f, 0x7a, 0x1f, 0xa0, 0x52, 0x10, 0xd1, 0xf4, 0xf0, 0xd5, 0xce, 0x79, 0x70, 0x29, 0x32, 0xe2, 0xca, 0xbe, 0x70, 0x1f, 0xdf, 0xad, 0x6b, 0x4b, 0xb7, 0x11, 0x01, 0xf4, 0x4b, 0xad, 0x66, 0x6a, 0x11, 0x13, 0x0f, 0xe2, 0xee, 0x82, 0x9e, 0x4d, 0x02, 0x9d, 0xc9, 0x1c, 0xdd, 0x67, 0x16, 0xdb, 0xb9, 0x06, 0x18, 0x86, 0xed, 0xc1, 0xba, 0x94, 0x21, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x52, 0x30, 0x50, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x89, 0x4f, 0xde, 0x5b, 0xcc, 0x69, 0xe2, 0x52, 0xcf, 0x3e, 0xa3, 0x00, 0xdf, 0xb1, 0x97, 0xb8, 0x1d, 0xe1, 0xc1, 0x46, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x59, 0x16, 0x45, 0xa6, 0x9a, 0x2e, 0x37, 0x79, 0xe4, 0xf6, 0xdd, 0x27, 0x1a, 0xba, 0x1c, 0x0b, 0xfd, 0x6c, 0xd7, 0x55, 0x99, 0xb5, 0xe7, 0xc3, 0x6e, 0x53, 0x3e, 0xff, 0x36, 0x59, 0x08, 0x43, 0x24, 0xc9, 0xe7, 0xa5, 0x04, 0x07, 0x9d, 0x39, 0xe0, 0xd4, 0x29, 0x87, 0xff, 0xe3, 0xeb, 0xdd, 0x09, 0xc1, 0xcf, 0x1d, 0x91, 0x44, 0x55, 0x87, 0x0b, 0x57, 0x1d, 0xd1, 0x9b, 0xdf, 0x1d, 0x24, 0xf8, 0xbb, 0x9a, 0x11, 0xfe, 0x80, 0xfd, 0x59, 0x2b, 0xa0, 0x39, 0x8c, 0xde, 0x11, 0xe2, 0x65, 0x1e, 0x61, 0x8c, 0xe5, 0x98, 0xfa, 0x96, 0xe5, 0x37, 0x2e, 0xef, 0x3d, 0x24, 0x8a, 0xfd, 0xe1, 0x74, 0x63, 0xeb, 0xbf, 0xab, 0xb8, 0xe4, 0xd1, 0xab, 0x50, 0x2a, 0x54, 0xec, 0x00, 0x64, 0xe9, 0x2f, 0x78, 0x19, 0x66, 0x0d, 0x3f, 0x27, 0xcf, 0x20, 0x9e, 0x66, 0x7f, 0xce, 0x5a, 0xe2, 0xe4, 0xac, 0x99, 0xc7, 0xc9, 0x38, 0x18, 0xf8, 0xb2, 0x51, 0x07, 0x22, 0xdf, 0xed, 0x97, 0xf3, 0x2e, 0x3e, 0x93, 0x49, 0xd4, 0xc6, 0x6c, 0x9e, 0xa6, 0x39, 0x6d, 0x74, 0x44, 0x62, 0xa0, 0x6b, 0x42, 0xc6, 0xd5, 0xba, 0x68, 0x8e, 0xac, 0x3a, 0x01, 0x7b, 0xdd, 0xfc, 0x8e, 0x2c, 0xfc, 0xad, 0x27, 0xcb, 0x69, 0xd3, 0xcc, 0xdc, 0xa2, 0x80, 0x41, 0x44, 0x65, 0xd3, 0xae, 0x34, 0x8c, 0xe0, 0xf3, 0x4a, 0xb2, 0xfb, 0x9c, 0x61, 0x83, 0x71, 0x31, 0x2b, 0x19, 0x10, 0x41, 0x64, 0x1c, 0x23, 0x7f, 0x11, 0xa5, 0xd6, 0x5c, 0x84, 0x4f, 0x04, 0x04, 0x84, 0x99, 0x38, 0x71, 0x2b, 0x95, 0x9e, 0xd6, 0x85, 0xbc, 0x5c, 0x5d, 0xd6, 0x45, 0xed, 0x19, 0x90, 0x94, 0x73, 0x40, 0x29, 0x26, 0xdc, 0xb4, 0x0e, 0x34, 0x69, 0xa1, 0x59, 0x41, 0xe8, 0xe2, 0xcc, 0xa8, 0x4b, 0xb6, 0x08, 0x46, 0x36, 0xa0, 0x00, 0x00 };

        var serverCertificate = ServerCertificateHandshake.Parse(data);

        Assert.Empty(serverCertificate.RequestContext);
        var certBuf = Assert.Single(serverCertificate.Certificates);
        var cert = certBuf.ToX509Certificate2();
        Assert.Equal("CN=example.ulfheim.net, C=US", cert.Subject);
        Assert.Empty(certBuf.Extensions);

        var length = serverCertificate.Length();
        Assert.Equal(data.Length, length);

        var buffer = new byte[length];
        serverCertificate.Write(buffer);
        Assert.Equal(data, buffer);
    }





    private CertificateBuffer CreateCertificateBuffer(int certSize, int extSize)
    {
        var certData = new byte[certSize];
        var extData = new byte[extSize];
        new Random().NextBytes(certData);
        new Random().NextBytes(extData);
        return new CertificateBuffer(certData, extData);
    }

    private byte[] CreateRequestContext(int size)
    {
        var context = new byte[size];
        new Random().NextBytes(context);
        return context;
    }

    [Fact]
    public void Constructor_WithRequestContext_ShouldSetPropertiesCorrectly()
    {
        // Arrange
        var certs = new[] { CreateCertificateBuffer(100, 10) };
        var context = CreateRequestContext(50);

        // Act
        var handshake = new ServerCertificateHandshake(certs, context);

        // Assert
        Assert.Equal(certs, handshake.Certificates);
        Assert.Equal(context, handshake.RequestContext);
    }

    [Fact]
    public void Constructor_WithoutRequestContext_ShouldSetEmptyRequestContext()
    {
        // Arrange
        var certs = new[] { CreateCertificateBuffer(100, 10) };

        // Act
        var handshake = new ServerCertificateHandshake(certs);

        // Assert
        Assert.Equal(certs, handshake.Certificates);
        Assert.NotNull(handshake.RequestContext);
        Assert.Empty(handshake.RequestContext);
    }

    [Fact]
    public void Constructor_WithOverlyLongRequestContext_ShouldThrowArgumentException()
    {
        // Arrange
        var certs = new[] { CreateCertificateBuffer(100, 10) };
        var longContext = new byte[byte.MaxValue + 1]; // 256 bytes

        // Act & Assert
        Assert.Throws<ArgumentException>(() => new ServerCertificateHandshake(certs, longContext));
    }

    [Fact]
    public void Length_ShouldCalculateCorrectSizeForMultipleCertsAndContext()
    {
        // Arrange
        var cert1 = CreateCertificateBuffer(100, 10); // Length = 3 + 100 + 2 + 10 = 115
        var cert2 = CreateCertificateBuffer(200, 20); // Length = 3 + 200 + 2 + 20 = 225
        var context = CreateRequestContext(50);
        var handshake = new ServerCertificateHandshake([cert1, cert2], context);
        // Expected length: 1 (ctx len) + 50 (ctx) + 3 (certs len) + 115 (cert1) + 225 (cert2) = 394
        var expectedLength = 1 + context.Length + 3 + cert1.Length() + cert2.Length();

        // Act
        var actualLength = handshake.Length();

        // Assert
        Assert.Equal(expectedLength, actualLength);
        Assert.Equal(394, actualLength);
    }

    [Fact]
    public void Length_WithEmptyRequestContext_ShouldCalculateCorrectSize()
    {
        // Arrange
        var cert1 = CreateCertificateBuffer(100, 10); // Length = 115
        var handshake = new ServerCertificateHandshake(new[] { cert1 });
        // Expected length: 1 (ctx len=0) + 0 (ctx) + 3 (certs len) + 115 (cert1) = 119
        var expectedLength = 1 + 0 + 3 + cert1.Length();

        // Act
        var actualLength = handshake.Length();

        // Assert
        Assert.Equal(expectedLength, actualLength);
        Assert.Equal(119, actualLength);
    }

    [Fact]
    public void Write_WithInsufficientBuffer_ShouldThrowArgumentException()
    {
        // Arrange
        var handshake = new ServerCertificateHandshake(new[] { CreateCertificateBuffer(10, 5) }, CreateRequestContext(8));
        var buffer = new byte[handshake.Length() - 1]; // Buffer is one byte too small

        // Act & Assert
        Assert.Throws<ArgumentException>(() => handshake.Write(buffer));
    }

    [Fact]
    public void Write_And_Parse_ShouldBeSymmetric()
    {
        // Arrange
        var cert1 = CreateCertificateBuffer(150, 20);
        var cert2 = CreateCertificateBuffer(250, 30);
        var context = CreateRequestContext(60);
        var originalHandshake = new ServerCertificateHandshake(new[] { cert1, cert2 }, context);
        var buffer = new byte[originalHandshake.Length()];

        // Act
        originalHandshake.Write(buffer);
        var parsedHandshake = ServerCertificateHandshake.Parse(buffer);

        // Assert
        Assert.Equal(originalHandshake.RequestContext, parsedHandshake.RequestContext);
        Assert.Equal(originalHandshake.Certificates.Length, parsedHandshake.Certificates.Length);
        for (int i = 0; i < originalHandshake.Certificates.Length; i++)
        {
            Assert.Equal(originalHandshake.Certificates[i].Certificate, parsedHandshake.Certificates[i].Certificate);
            Assert.Equal(originalHandshake.Certificates[i].Extensions, parsedHandshake.Certificates[i].Extensions);
        }
    }

    [Fact]
    public void Write_And_Parse_WithEmptyContextAndExtensions_ShouldBeSymmetric()
    {
        // Arrange
        var certs = new[] { CreateCertificateBuffer(100, 0) }; // no extensions
        var originalHandshake = new ServerCertificateHandshake(certs); // empty context
        var buffer = new byte[originalHandshake.Length()];

        // Act
        originalHandshake.Write(buffer);
        var parsedHandshake = ServerCertificateHandshake.Parse(buffer);

        // Assert
        Assert.Empty(parsedHandshake.RequestContext);
        Assert.Single(parsedHandshake.Certificates);
        Assert.Equal(originalHandshake.Certificates[0].Certificate, parsedHandshake.Certificates[0].Certificate);
        Assert.Empty(parsedHandshake.Certificates[0].Extensions);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(3)]
    [InlineData(5)]
    [InlineData(8)]
    [InlineData(10)]
    [InlineData(13)]
    [InlineData(17)]
    [InlineData(19)]
    public void Parse_WithTruncatedBuffer_ShouldThrowFormatException(int bufferSize)
    {
        // Arrange
        // A valid buffer with context_len=5, certs_len=15
        var validBuffer = new byte[] { 5, 1, 2, 3, 4, 5, 0, 0, 15, 0, 0, 5, 1, 2, 3, 4, 5, 0, 5, 6, 7, 8, 9, 10 };
        var truncatedBuffer = validBuffer.Take(bufferSize).ToArray();

        // Act & Assert
        Assert.Throws<FormatException>(() => ServerCertificateHandshake.Parse(truncatedBuffer));
    }

    [Fact]
    public void Parse_WhenCertificatesLengthFieldIsTooLarge_ShouldThrowFormatException()
    {
        // Arrange
        // Total certificates length is declared as 20, but only one cert of length 10 is provided.
        // The parser will try to read a second certificate header beyond the provided certificate data.
        var malformedBuffer = new byte[]
        {
            0,          // Request Context length
            0, 0, 20,   // MALFORMED: Total certificates length is 20
            // Certificate 1 (actual total length is 10)
            0, 0, 3,    // Certificate data length
            1, 2, 3,    // Certificate data
            0, 2,       // Extensions length
            4, 5,       // Extensions data
            // Buffer ends here, but parser expects 10 more bytes based on the total length field
        };

        // Act & Assert
        Assert.Throws<FormatException>(() => ServerCertificateHandshake.Parse(malformedBuffer));
    }
}
