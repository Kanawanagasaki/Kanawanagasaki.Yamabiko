namespace Kanawanagasaki.Yamabiko.Test.Dtls.Handshake;

using Kanawanagasaki.Yamabiko.Dtls.Enums;
using Kanawanagasaki.Yamabiko.Dtls.Extensions;
using Kanawanagasaki.Yamabiko.Dtls.Handshake;

public class ServerHelloHandshake_Tests
{
    [Fact]
    public void ParseAndWrite()
    {
        var data = new byte[] { 0xfe, 0xfd, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x00, 0x13, 0x01, 0x00, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x9f, 0xd7, 0xad, 0x6d, 0xcf, 0xf4, 0x29, 0x8d, 0xd3, 0xf9, 0x6d, 0x5b, 0x1b, 0x2a, 0xf9, 0x10, 0xa0, 0x53, 0x5b, 0x14, 0x88, 0xd7, 0xf8, 0xfa, 0xbb, 0x34, 0x9a, 0x98, 0x28, 0x80, 0xb6, 0x15, 0x00, 0x2b, 0x00, 0x02, 0xfe, 0xfc };

        var serverHello = ServerHelloHandshake.Parse(data);
        Assert.Equal(0xfefd, (ushort)serverHello.LegacyVersion);

        var random = new byte[] { 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f };
        Assert.Equal(random, serverHello.Random);

        Assert.Empty(serverHello.LegacySessionId);

        Assert.Equal(ECipherSuite.TLS_AES_128_GCM_SHA256, serverHello.CipherSuite);

        Assert.Equal(0, serverHello.CompressionMethod);

        Assert.Equal(2, serverHello.Extensions.Length);

        var keyShare = Assert.IsType<KeyShareExtension>(serverHello.Extensions[0]);
        var (group, key) = Assert.Single(keyShare.GroupToKey);
        Assert.Equal(ENamedGroup.X25519, group);
        var expectedKey = new byte[] { 0x9f, 0xd7, 0xad, 0x6d, 0xcf, 0xf4, 0x29, 0x8d, 0xd3, 0xf9, 0x6d, 0x5b, 0x1b, 0x2a, 0xf9, 0x10, 0xa0, 0x53, 0x5b, 0x14, 0x88, 0xd7, 0xf8, 0xfa, 0xbb, 0x34, 0x9a, 0x98, 0x28, 0x80, 0xb6, 0x15 };
        Assert.Equal(expectedKey, key);

        var supportedVersions = Assert.IsType<SupportedVersionsExtension>(serverHello.Extensions[1]);
        var supportedVersion = Assert.Single(supportedVersions.Versions);
        Assert.Equal(EVersions.DTLS1_3, supportedVersion);
    }
}
