namespace Kanawanagasaki.Yamabiko.Test.Dtls.Handshake;

using Kanawanagasaki.Yamabiko.Dtls.Handshake;

public class HandshakeMessage_Tests
{
    [Fact]
    public void ParseAndWrite_ClientHello()
    {
        var data = new byte[] { 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0xfe, 0xfd, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0x01, 0x00, 0x00, 0x61, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38, 0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54, 0x00, 0x2b, 0x00, 0x03, 0x02, 0xfe, 0xfc, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 0x06, 0x03, 0x05, 0x03, 0x04, 0x03, 0x02, 0x03, 0x08, 0x06, 0x08, 0x0b, 0x08, 0x05, 0x08, 0x0a, 0x08, 0x04, 0x08, 0x09, 0x06, 0x01, 0x05, 0x01, 0x04, 0x01, 0x03, 0x01, 0x02, 0x01, 0x00, 0x16, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x02, 0x00, 0x1d };
        var fragment = HandshakeFragment.Parse(data);
        var message = new HandshakeMessage(fragment);

        Assert.Equal(0, message.SequenceNumber);
        Assert.IsType<ClientHelloHandshake>(message.Handshake);

        var fragments = message.GetFragments(data.Length);
        var serializedFragment = Assert.Single(fragments);
        var length = serializedFragment.Length();
        var buffer = new byte[length];
        serializedFragment.Write(buffer);
        Assert.Equal(data, buffer);
    }

    [Fact]
    public void ParseAndWrite_ClientHello_MultipleFragments()
    {
        var data = new byte[] { 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0xfe, 0xfd, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0x01, 0x00, 0x00, 0x61, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38, 0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54, 0x00, 0x2b, 0x00, 0x03, 0x02, 0xfe, 0xfc, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 0x06, 0x03, 0x05, 0x03, 0x04, 0x03, 0x02, 0x03, 0x08, 0x06, 0x08, 0x0b, 0x08, 0x05, 0x08, 0x0a, 0x08, 0x04, 0x08, 0x09, 0x06, 0x01, 0x05, 0x01, 0x04, 0x01, 0x03, 0x01, 0x02, 0x01, 0x00, 0x16, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x02, 0x00, 0x1d };
        var fragment = HandshakeFragment.Parse(data);
        var message = new HandshakeMessage(fragment);

        Assert.Equal(0, message.SequenceNumber);
        Assert.IsType<ClientHelloHandshake>(message.Handshake);

        var fragments = message.GetFragments(20);
        Assert.NotEmpty(fragments);
        Assert.NotEqual(1, fragments.Length);
        var message2 = new HandshakeMessage(fragments[0]);
        foreach (var f in fragments.Skip(1))
            message2.AddFragment(f);

        var fragments2 = message2.GetFragments(data.Length);
        var serializedFragment = Assert.Single(fragments2);
        var length = serializedFragment.Length();
        var buffer = new byte[length];
        serializedFragment.Write(buffer);
        Assert.Equal(data, buffer);
    }

    [Fact]
    public void ParseAndWrite_ServerHello()
    {
        var data = new byte[] { 0x02, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0xfe, 0xfd, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x00, 0x13, 0x01, 0x00, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x9f, 0xd7, 0xad, 0x6d, 0xcf, 0xf4, 0x29, 0x8d, 0xd3, 0xf9, 0x6d, 0x5b, 0x1b, 0x2a, 0xf9, 0x10, 0xa0, 0x53, 0x5b, 0x14, 0x88, 0xd7, 0xf8, 0xfa, 0xbb, 0x34, 0x9a, 0x98, 0x28, 0x80, 0xb6, 0x15, 0x00, 0x2b, 0x00, 0x02, 0xfe, 0xfc };
        var fragment = HandshakeFragment.Parse(data);
        var message = new HandshakeMessage(fragment);

        Assert.Equal(0, message.SequenceNumber);
        Assert.IsType<ServerHelloHandshake>(message.Handshake);

        var fragments = message.GetFragments(data.Length);
        var serializedFragment = Assert.Single(fragments);
        var length = serializedFragment.Length();
        var buffer = new byte[length];
        serializedFragment.Write(buffer);
        Assert.Equal(data, buffer);
    }
}
