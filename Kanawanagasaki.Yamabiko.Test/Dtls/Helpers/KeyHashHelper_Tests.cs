namespace Kanawanagasaki.Yamabiko.Test.Dtls.Helpers;

using Kanawanagasaki.Yamabiko.Dtls;
using Kanawanagasaki.Yamabiko.Dtls.Handshake;
using Kanawanagasaki.Yamabiko.Dtls.Helpers;
using System.Security.Cryptography;

public class KeyHashHelper_Tests
{
    [Fact]
    public void GenerateX25519PublicKey()
    {
        var clientPrivateKey = new byte[] { 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f };
        var expectedClientPublicKey = new byte[] { 0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38, 0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54 };

        var clientPublicKey = KeyHashHelper.GenerateX25519PublicKey(clientPrivateKey);
        Assert.Equal(expectedClientPublicKey, clientPublicKey);

        var serverPrivateKey = new byte[] { 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf };
        var expectedServerPublicKey = new byte[] { 0x9f, 0xd7, 0xad, 0x6d, 0xcf, 0xf4, 0x29, 0x8d, 0xd3, 0xf9, 0x6d, 0x5b, 0x1b, 0x2a, 0xf9, 0x10, 0xa0, 0x53, 0x5b, 0x14, 0x88, 0xd7, 0xf8, 0xfa, 0xbb, 0x34, 0x9a, 0x98, 0x28, 0x80, 0xb6, 0x15 };

        var serverPublicKey = KeyHashHelper.GenerateX25519PublicKey(serverPrivateKey);
        Assert.Equal(expectedServerPublicKey, serverPublicKey);
    }

    [Fact]
    public void HelloHash()
    {
        var clientHelloData = new byte[] { 0x16, 0xfe, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0xfe, 0xfd, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0x01, 0x00, 0x00, 0x61, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38, 0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54, 0x00, 0x2b, 0x00, 0x03, 0x02, 0xfe, 0xfc, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 0x06, 0x03, 0x05, 0x03, 0x04, 0x03, 0x02, 0x03, 0x08, 0x06, 0x08, 0x0b, 0x08, 0x05, 0x08, 0x0a, 0x08, 0x04, 0x08, 0x09, 0x06, 0x01, 0x05, 0x01, 0x04, 0x01, 0x03, 0x01, 0x02, 0x01, 0x00, 0x16, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x02, 0x00, 0x1d };
        var serverHelloData = new byte[] { 0x16, 0xfe, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0xfe, 0xfd, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x00, 0x13, 0x01, 0x00, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x9f, 0xd7, 0xad, 0x6d, 0xcf, 0xf4, 0x29, 0x8d, 0xd3, 0xf9, 0x6d, 0x5b, 0x1b, 0x2a, 0xf9, 0x10, 0xa0, 0x53, 0x5b, 0x14, 0x88, 0xd7, 0xf8, 0xfa, 0xbb, 0x34, 0x9a, 0x98, 0x28, 0x80, 0xb6, 0x15, 0x00, 0x2b, 0x00, 0x02, 0xfe, 0xfc };
        var expectedHelloHash = new byte[] { 0xae, 0xe8, 0xeb, 0xa0, 0xd2, 0xee, 0x87, 0x05, 0x2f, 0xbb, 0xc6, 0x86, 0x4c, 0x15, 0x14, 0xc5, 0xa9, 0x27, 0xd6, 0xf0, 0xff, 0xb4, 0xf7, 0x95, 0x4c, 0x7f, 0x37, 0x9d, 0x95, 0xf1, 0xb1, 0xd7 };

        int clientHelloOffset = 0;
        var clientHelloRecord = PlainTextRecord.Parse(clientHelloData, ref clientHelloOffset);
        var clientHelloFragment = HandshakeFragment.Parse(clientHelloRecord.Buffer);

        int serverHelloOffset = 0;
        var serverHelloRecord = PlainTextRecord.Parse(serverHelloData, ref serverHelloOffset);
        var serverHelloFragment = HandshakeFragment.Parse(serverHelloRecord.Buffer);

        var helloHash = KeyHashHelper.HashFragments([clientHelloFragment, serverHelloFragment]);

        Assert.Equal(expectedHelloHash, helloHash);
    }

    [Fact]
    public void SharedSecret()
    {
        var clientPrivateKey = new byte[] { 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f };
        var clientPublicKey = KeyHashHelper.GenerateX25519PublicKey(clientPrivateKey);
        var serverPrivateKey = new byte[] { 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf };
        var serverPublicKey = KeyHashHelper.GenerateX25519PublicKey(serverPrivateKey);
        var expectedSharedSecret = new byte[] { 0xdf, 0x4a, 0x29, 0x1b, 0xaa, 0x1e, 0xb7, 0xcf, 0xa6, 0x93, 0x4b, 0x29, 0xb4, 0x74, 0xba, 0xad, 0x26, 0x97, 0xe2, 0x9f, 0x1f, 0x92, 0x0d, 0xcc, 0x77, 0xc8, 0xa0, 0xa0, 0x88, 0x44, 0x76, 0x24 };

        var sharedSecret = KeyHashHelper.SharedSecret(clientPrivateKey, serverPublicKey);
        Assert.Equal(expectedSharedSecret, sharedSecret);

        sharedSecret = KeyHashHelper.SharedSecret(serverPrivateKey, clientPublicKey);
        Assert.Equal(expectedSharedSecret, sharedSecret);
    }

    [Fact]
    public void DerivedKeys()
    {
        var clientHelloData = new byte[] { 0x16, 0xfe, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0xfe, 0xfd, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0x01, 0x00, 0x00, 0x61, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38, 0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54, 0x00, 0x2b, 0x00, 0x03, 0x02, 0xfe, 0xfc, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 0x06, 0x03, 0x05, 0x03, 0x04, 0x03, 0x02, 0x03, 0x08, 0x06, 0x08, 0x0b, 0x08, 0x05, 0x08, 0x0a, 0x08, 0x04, 0x08, 0x09, 0x06, 0x01, 0x05, 0x01, 0x04, 0x01, 0x03, 0x01, 0x02, 0x01, 0x00, 0x16, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x02, 0x00, 0x1d };
        var serverHelloData = new byte[] { 0x16, 0xfe, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0xfe, 0xfd, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x00, 0x13, 0x01, 0x00, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x9f, 0xd7, 0xad, 0x6d, 0xcf, 0xf4, 0x29, 0x8d, 0xd3, 0xf9, 0x6d, 0x5b, 0x1b, 0x2a, 0xf9, 0x10, 0xa0, 0x53, 0x5b, 0x14, 0x88, 0xd7, 0xf8, 0xfa, 0xbb, 0x34, 0x9a, 0x98, 0x28, 0x80, 0xb6, 0x15, 0x00, 0x2b, 0x00, 0x02, 0xfe, 0xfc };

        int clientHelloOffset = 0;
        var clientHelloRecord = PlainTextRecord.Parse(clientHelloData, ref clientHelloOffset);
        var clientHelloFragment = HandshakeFragment.Parse(clientHelloRecord.Buffer);

        int serverHelloOffset = 0;
        var serverHelloRecord = PlainTextRecord.Parse(serverHelloData, ref serverHelloOffset);
        var serverHelloFragment = HandshakeFragment.Parse(serverHelloRecord.Buffer);

        var helloHash = KeyHashHelper.HashFragments([clientHelloFragment, serverHelloFragment]);

        var clientPrivateKey = new byte[] { 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f };
        var serverPrivateKey = new byte[] { 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf };
        var serverPublicKey = KeyHashHelper.GenerateX25519PublicKey(serverPrivateKey);

        var sharedSecret = KeyHashHelper.SharedSecret(clientPrivateKey, serverPublicKey);

        const string prefix = "dtls13";

        var zeros = new byte[helloHash.Length];
        var earlySecret = KeyHashHelper.HKDF_Extract(zeros, zeros);
        var emptyHash = SHA256.HashData(Array.Empty<byte>());
        var derived = KeyHashHelper.HKDF_ExpandLabel(earlySecret, "derived", emptyHash, helloHash.Length, prefix);
        var handshakeSecret = KeyHashHelper.HKDF_Extract(derived, sharedSecret);

        var clientHS = KeyHashHelper.DeriveSecret(handshakeSecret, "c hs traffic", helloHash, prefix);
        var serverHS = KeyHashHelper.DeriveSecret(handshakeSecret, "s hs traffic", helloHash, prefix);

        var expectedClientHandshakeKey = new byte[] { 0x6c, 0xaa, 0x26, 0x33, 0xd5, 0xe4, 0x8f, 0x10, 0x05, 0x1e, 0x69, 0xdc, 0x45, 0x54, 0x9c, 0x97 };
        var clientHandshakeKey = KeyHashHelper.HKDF_ExpandLabel(clientHS, "key", Array.Empty<byte>(), 16, prefix);
        Assert.Equal(expectedClientHandshakeKey, clientHandshakeKey);

        var expectedClientHandshakeIV = new byte[] { 0x10, 0x6d, 0xc6, 0xe3, 0x93, 0xb7, 0xa9, 0xea, 0x8e, 0xf2, 0x9d, 0xd7 };
        var clientHandshakeIV = KeyHashHelper.HKDF_ExpandLabel(clientHS, "iv", Array.Empty<byte>(), 12, prefix);
        Assert.Equal(expectedClientHandshakeIV, clientHandshakeIV);

        var expectedServerHandshakeKey = new byte[] { 0x00, 0x4e, 0x03, 0xe6, 0x4a, 0xb6, 0xcb, 0xa6, 0xb5, 0x42, 0x77, 0x5e, 0xc2, 0x30, 0xe2, 0x0a };
        var serverHandshakeKey = KeyHashHelper.HKDF_ExpandLabel(serverHS, "key", Array.Empty<byte>(), 16, prefix);
        Assert.Equal(expectedServerHandshakeKey, serverHandshakeKey);

        var expectedServerHandshakeIV = new byte[] { 0x6d, 0x99, 0x24, 0xbe, 0x04, 0x4e, 0xe9, 0x7c, 0x62, 0x49, 0x13, 0xf2, };
        var serverHandshakeIV = KeyHashHelper.HKDF_ExpandLabel(serverHS, "iv", Array.Empty<byte>(), 12, prefix);
        Assert.Equal(expectedServerHandshakeIV, serverHandshakeIV);

        var expectedClientRecordNumberKey = new byte[] { 0xbe, 0xed, 0x62, 0x18, 0x67, 0x66, 0x35, 0xc2, 0xcb, 0x46, 0xa4, 0x56, 0x94, 0x14, 0x4f, 0xec, };
        var clientRecordNumberKey = KeyHashHelper.HKDF_ExpandLabel(clientHS, "sn", Array.Empty<byte>(), 16, prefix);
        Assert.Equal(expectedClientRecordNumberKey, clientRecordNumberKey);

        var expectedServerRecordNumberKey = new byte[] { 0x71, 0x73, 0xfa, 0xc5, 0x11, 0x94, 0xe7, 0x75, 0x00, 0x1d, 0x62, 0x5e, 0xf6, 0x9d, 0x7c, 0x9f, };
        var serverRecordNumberKey = KeyHashHelper.HKDF_ExpandLabel(serverHS, "sn", Array.Empty<byte>(), 16, prefix);
        Assert.Equal(expectedServerRecordNumberKey, serverRecordNumberKey);
    }
}
